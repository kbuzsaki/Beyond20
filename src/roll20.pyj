from utils import replaceRolls, injectPageScript, sendCustomEvent, alertQuickSettings, alertFullSettings
from settings import getDefaultSettings, getStoredSettings, WhisperType, RollType
import re
from elementmaker import E

print("Beyond20: Roll20 module loaded.")

ROLL20_WHISPER_QUERY="?{Whisper?|Public Roll,|Whisper Roll,/w gm }"
ROLL20_ADVANTAGE_QUERY = "{{{{query=1}}}} ?{{Advantage?|Normal Roll,&#123&#123normal=1&#125&#125|Advantage,&#123&#123advantage=1&#125&#125 &#123&#123r2={r2}&#125&#125|Disadvantage,&#123&#123disadvantage=1&#125&#125 &#123&#123r2={r2}&#125&#125|Super Advantage,&#123&#123advantage=1&#125&#125 &#123&#123r2={r2kh}&#125&#125|Super Disadvantage,&#123&#123disadvantage=1&#125&#125 &#123&#123r2={r2kl}&#125&#125}}"
ROLL20_INITIATIVE_ADVANTAGE_QUERY="?{Roll Initiative with advantage?|Normal Roll,1d20|Advantage,2d20kh1|Disadvantage,2d20kl1|Super Advantage,3d20kh1|Super Disadvantage,3d20kl1}"
ROLL20_TOLL_THE_DEAD_QUERY="?{Is the target missing any of its hit points?|Yes,d12|No,d8}"
ROLL20_ADD_GENERIC_DAMAGE_DMG_QUERY="?{Add %dmgType% damage?|No,0|Yes,%dmg%}"


chat = document.getElementById("textchat-input")
txt = chat.getElementsByTagName("textarea")[0]
btn = chat.getElementsByTagName("button")[0]
speakingas = document.getElementById("speakingas")
settings = getDefaultSettings()

def postChatMessage(message, character=None):
    nonlocal txt, btn, speakingas

    set_speakingas = True
    old_as = speakingas.value
    if character:
        character = character.toLowerCase()
        for i in range(speakingas.children.length):
            if speakingas.children[i].text.toLowerCase() == character:
                speakingas.children[i].selected = True
                set_speakingas = False
                break
    if set_speakingas:
        speakingas.children[0].selected = True
    old_text = txt.value
    txt.value = message
    btn.click()
    txt.value = old_text
    speakingas.value = old_as

def escapeRoll20Macro(text):
    def escapeCB(m):
        o = ord(m.group(0))
        if o == 10:
            o = 13
        return "&#" + str(o) + ";"
    to_escape = str.join("|\\", "\n[]{}()%@&?".split(""))
    return re.sub(to_escape, escapeCB, text)

def genRoll(dice, modifiers={}):
    roll = "[[" + dice
    for m in modifiers:
        mod = modifiers[m]
        if len(mod) > 0:
            if mod[0] == '+' or mod[0] == '-' or mod[0] == '?' or mod[0] == '&':
                roll += " " + mod
            else:
                roll += "+" + mod
            if len(m) > 0:
                roll += "[" + m + "]"
    roll += "]]"
    return roll

def subRolls(text, damage_only=False, overrideCB=None):
    if overrideCB:
        replaceCB = overrideCB
    else:
        replaceCB = def(dice, modifier):
            if damage_only and dice == "":
                return dice + modifier
            dice_formula = ("1d20" if dice == "" else dice) + modifier
            return genRoll(dice_formula)

    return replaceRolls(text, replaceCB)

def subDescriptionRolls(request, description):
    nonlocal settings
    if not settings["subst-vtt"]:
        return description
    replaceCB = def(dice, modifier):
        roll = ("1d20" if dice == "" else dice) + modifier
        roll_template = template(request, "simple",
                                 {"charname": request.character.name,
                                  "rname" : request.name,
                                  "mod": dice + modifier,
                                  "r1": genRoll(roll),
                                  "normal": 1})
        return "[" + dice + modifier + "](!\n" + escapeRoll20Macro(roll_template) + ")"
    return subRolls(description, overrideCB=replaceCB)

def subDamageRolls(text):
    return subRolls(text, damage_only=True)

def damagesToRollProperties(damages, damage_types, crits, crit_types):
    nonlocal settings

    properties = {"damage": 1,
                  "dmg1flag": 1}

    properties["dmg1"] = subDamageRolls(damages[0])
    properties["dmg1type"] = damage_types[0]
    if crits? and len(crits) > 0:
        properties["crit1"] = settings["crit-prefix"] + subDamageRolls(crits[0])
    if len(damages) > 1:
        properties["dmg2flag"] = 1
        properties["dmg2"] = subDamageRolls(str.join(" | ", list(damages[1:])))
        properties["dmg2type"] = str.join(" | ", damage_types[1:])
        if crits? and len(crits) > 1:
            properties["crit2"] = settings["crit-prefix"] + subDamageRolls(str.join(" | ", crits[1:]))
    # If there are more than 1 crit but only 1 damage (brutal critical/savage attacks), then show all the crits as part of the first damage
    elif crits? and len(crits) > 1:
        properties["crit1"] = settings["crit-prefix"] + subDamageRolls(str.join(" | ", crits))


    return properties

def advantageString(advantage, r1):
    try:
        return {RollType.NORMAL: " {{normal=1}}",
                RollType.DOUBLE: " {{always=1}} {{r2=" + r1 + "}}",
                RollType.THRICE: " {{always=1}} {{r2=" + r1 + "}} {{r3=" + r1 + "}}",
                RollType.QUERY: str.format(ROLL20_ADVANTAGE_QUERY, r2=r1, r2kh=r1.replace("1d20", "2d20kh1"), r2kl=r1.replace("1d20", "2d20kl1")),
                RollType.ADVANTAGE: " {{advantage=1}} {{r2=" + r1 + "}}",
                RollType.DISADVANTAGE: " {{disadvantage=1}} {{r2=" + r1 + "}}",
                RollType.SUPER_ADVANTAGE: " {{advantage=1}} {{r2=" + r1.replace("1d20", "2d20kh1") + "}}",
                RollType.SUPER_DISADVANTAGE: " {{disadvantage=1}} {{r2=" + r1.replace("1d20", "2d20kl1") + "}}",
                }[advantage]
    except:
        return " {{normal=1}}"

def whisperString(whisper):
    try:
        return {WhisperType.NO: "",
                WhisperType.HIDE_NAMES: "",
                WhisperType.YES: "/w gm",
                WhisperType.QUERY: ROLL20_WHISPER_QUERY
                }[whisper]
    except:
        return ""

def template(request, name, properties):
    return whisperString(request.whisper) + templateAction(request, name, properties)

def templateAction(request, name, properties):
    nonlocal settings

    template_type = settings["roll20-template"]
    if template_type == "roll20":
        return templateAction5eByRoll20(request, name, properties)
    elif template_type == "5e-community":
        return template5eCommunity(request)
    elif template_type == "default":
        return templateActionDefault(request, name, properties)
    else:
        print("ERROR, unrecognized template type: ", template_type)

def template5eCommunity(request):
    rtype = request["type"]
    is_spell = rtype == "spell-attack" or rtype == "spell-card"
    is_attack = rtype == "attack"
    is_save = rtype == "saving-throw"
    is_ability = rtype == "ability"
    is_skill = rtype == "skill"
    is_hit_die = rtype == "hit-dice"
    is_custom = rtype == "custom"
    is_initiative = rtype == "initiative"
    is_item = rtype == "item"

    def join(sep, els):
        s = ""
        for i in range(len(els)):
            if i != 0:
                s += sep
            s += els[i]
        return s

    def segment(k, v): return "{{" + k + "=" + v + "}}"
    def bool_seg(k, c): return segment(k, "1") if c else ""
    def opt_segment(k, v): return segment(k, v) if v else ""

    def macro(el): return "[[" + el + "]]"
    def sum_macro(els): return macro(join(" ", els))
    def get_attack(request): return sum_macro(["1d20", request["to-hit"]])
    def get_nth_damage(request, n): return sum_macro([request["damages"][n]]) + " " + request["damage-types"][n]
    def get_primary_damage(request): return get_nth_damage(request, 0)
    def get_auxiliary_damage(request): return "Additional damage: " + join(", ", [get_nth_damage(request, n) for n in range(1, len(request["damages"]))])
    def get_nth_crit_damage(request, n): return "Additional " + sum_macro([request["critical-damages"][n]]) + " " + request["critical-damage-types"][n]
    def get_primary_crit_damage(request): return get_nth_crit_damage(request, 0)

    def get_title(request):
        if is_save:
            return request["name"] + " saving throw"
        elif is_skill:
            return request["skill"] + " (" + request["ability"] + ")"
        elif is_hit_die:
            return "Spending Hit Dice - " + request["roll"].split("+")[0]
        elif is_initiative:
            return "Initiative"
        return request["name"]

    def get_action_type(request):
        if is_spell:
            return request["level-school"]
        elif is_attack:
            return (request["attack-type"] + " Attack").replace("Attack Attack", "Attack")
        elif is_item:
            return request["item-type"]
        else:
            return ""

    def get_header_segments(request):
        return [
            "&{template:5eDefault}",
            segment("title", get_title(request)),
            segment("subheader", request["character"]["name"]),
            opt_segment("subheaderright", get_action_type(request)),
        ]

    def get_roll_segments(roll):
        return [segment("roll1", roll), bool_seg("showadvroll", True), segment("roll2", roll)]

    def get_save_segments(request):
        if not is_save:
            return []
        segs = []
        segs.extend([
            bool_seg("save", True),
            bool_seg("simple", True),
            segment("rollname", request["ability"] + " save"),
        ])
        segs.extend(get_roll_segments(macro(request["roll"])))
        return segs

    def get_hit_die_segments(request):
        if not is_hit_die:
            return []
        return [
            segment("rollname", "HP Regained"),
            segment("roll", macro(request["roll"])),
        ]

    def get_skill_segments(request):
        if not is_skill and not is_ability:
            return []
        segs = []
        segs.extend([
            bool_seg("ability", True),
            bool_seg("simple", True),
            segment("rollname", "Result"),
        ])
        segs.extend(get_roll_segments(macro(request["roll"])))
        return segs

    def get_custom_segments(request):
        if not is_custom:
            return []
        return [
            segment("rollname", "Result"),
            segment("roll", macro(request["roll"])),
        ]

    def get_initiative_segments(request):
        if not is_initiative:
            return []
        return [
            segment("rollname", "Initiative"),
            segment("roll", macro(request["roll"])),
        ]

    def get_item_segments(request):
        if not is_item:
            return []
        return [
            segment("freetextname", "Description"),
            segment("freetext", request["description"]),
        ]

    def get_attack_segments(request):
        if not is_attack:
            return []
        segs = []
        segs.extend([
            bool_seg("weapon", True),
            bool_seg("simple", True),
            segment("rollname", "Attack"),
        ])
        segs.extend(get_roll_segments(get_attack(request)))
        if "damages" in request:
            segs.append(segment("weapondamage", get_primary_damage(request)))
        if "critical-damages" in request:
            segs.append(segment("weaponcritdamage", get_primary_crit_damage(request)))
        return segs

    def get_spell_segments(request):
        if not is_spell:
            return []
        segments = []
        segments.extend([
            bool_seg("spell", True),
        ])
        if "to-hit" in request:
            segments.extend([
                bool_seg("spellshowattack", True),
                segment("spellattack", get_attack(request)),
                bool_seg("spellshowattackadv", True),
                segment("spellattackadv", get_attack(request)),
            ])
        if "save-dc" in request:
            segments.extend([
                bool_seg("spellshowsavethrow", True),
                segment("spellsavedc", macro(request["save-dc"])),
                segment("spellsavestat", request["save-ability"]),
                segment("spellsavesuccess", "See description."),
            ])
        if "damages" in request:
            segments.extend([
                bool_seg("spellshowdamage", True),
                segment("spelldamage", get_primary_damage(request)),
            ])
        if "critical-damages" in request:
            segments.extend([
                bool_seg("spellcancrit", True),
                segment("spellcritdamage", get_primary_crit_damage(request)),
            ])
        segments.append(bool_seg("spellshoweffects", True))
        if "damages" in request and len(request["damages"]) > 1:
            segments.append(opt_segment("spelleffect", get_auxiliary_damage(request) + "\n" + request["description"]))
        else:
            segments.append(opt_segment("spelleffect", request["description"]))
        return segments

    segments = []
    for f in [get_header_segments, get_hit_die_segments, get_save_segments, get_initiative_segments, get_item_segments,
            get_skill_segments, get_spell_segments, get_attack_segments, get_custom_segments]:
        for s in f(request):
            segments.append(s)

    print("segments: ", segments)
    print("len segs: ", len(segments))
    def format_segments(segs): return join(" ", [seg for seg in segs if seg])
    return format_segments(segments)

def templateActionBase(request, name, properties):
    removeProp = def(key):
        nonlocal result, properties
        result = result.replace("{{" + key + "=" + (properties[key] if key in properties else "1") + "}}", "")
        result = result.replace("&#123&#123" + key + "=" + (properties[key] if key in properties else "1") + "&#125&#125", "")

    result = " &{template:" + name + "}"
    for key in properties:
        result += " {{" + key + "=" + properties[key] + "}}"

    if request.advantage? and "normal" not in properties and name in ["simple", "atk", "atkdmg"]:
        result += advantageString(request.advantage, properties["r1"])

    if request.whisper == WhisperType.HIDE_NAMES:
        removeProp("charname")
        removeProp("rname")
        removeProp("rnamec")
        removeProp("description")

    return result

def templateAction5eByRoll20(request, name, properties):
    removeProp = def(key):
        nonlocal result, properties
        result = result.replace("{{" + key + "=" + (properties[key] if key in properties else "1") + "}}", "")
        result = result.replace("&#123&#123" + key + "=" + (properties[key] if key in properties else "1") + "&#125&#125", "")

    result = templateActionBase(request, name, properties)

    properties["r3"] = properties["r1"]
    removeProp("r3")
    del properties["r3"]

    return result

def templateActionDefault(request, name, properties):
    renameProp = def(old_key, new_key):
        nonlocal result
        result = result.replace("{{" + old_key + "=", "{{" + new_key + "=")
    removeProp = def(key):
        nonlocal result, properties
        result = result.replace("{{" + key + "=" + (properties[key] if key in properties else "1") + "}}", "")
        result = result.replace("&#123&#123" + key + "=" + (properties[key] if key in properties else "1") + "&#125&#125", "")

    result = templateActionBase(request, name, properties)

    result = result.replace("&{template:" + name + "}", "&{template:default}")


    renameProp("charname", "Character name")
    renameProp("rname", "name")
    if "{{r2=" in result or "&#123&#123r2=" in result:
        renameProp("r1", "Regular Roll")
        renameProp("r2", "Roll with [Dis]Advantage")
        renameProp("r3", "Roll with Super [Dis]Advantage")
        result = result.replace("&#123&#123r2=", "&#123&#123Roll with Advantage=")
        result = result.replace("&#123&#123r2=", "&#123&#123Roll with Disadvantage=")
        result = result.replace("&#123&#123r2=", "&#123&#123Roll with Super Advantage=")
        result = result.replace("&#123&#123r2=", "&#123&#123Roll with Super Disadvantage=")
    else:
        renameProp("r1", "Dice Roll")
    renameProp("mod", "Modifier")
    if properties["dmg2"]?:
        renameProp("dmg1", "First Damage")
        renameProp("dmg1type", "First Damage Type")
        renameProp("crit1", "First Crit Damage IF Critical")
        renameProp("dmg2", "Second Damage")
        renameProp("dmg2type", "Second Damage Type")
        renameProp("crit2", "Second Crit Damage IF Critical")
    if properties["dmg1"]?:
        renameProp("dmg1", "Damage")
        renameProp("dmg1type", "Damage Type")
        renameProp("crit1", "Crit Damage IF Critical")
    renameProp("saveattr", "Save Ability")
    renameProp("savedc", "Save DC")
    renameProp("athigherlevels", "At Higher Levels")
    renameProp("castingtime", "Casting Time")
    renameProp("hldmg", "Higher level cast")

    removeProp("attack")
    removeProp("attack")
    removeProp("damage")
    removeProp("save")
    removeProp("dmg1flag")
    removeProp("dmg2flag")
    removeProp("always")
    removeProp("normal")
    removeProp("advantage")
    removeProp("disadvantage")
    removeProp("query")

    return result

def rollAvatarDisplay(request):
    # Use query string to override url for image detection so the avatar link is always displayed in Roll20 as an image
    return "[x](" + request.character.avatar + "#.png)"

def rollSkill(request, custom_roll_dice=""):
    modifier = request.modifier
    # Custom skill
    if request.ability == "--" and request.character.abilities.length > 0:
        modifier = "?{Choose Ability"
        # [name, abbr, value, mod]
        magic = ""
        if request.modifier != "--" and request.modifier != "+0":
            magic = request.modifier
        for ability in request.character.abilities:
            modifier += "|" + ability[0] + ", " + ability[3] + magic
        modifier += "}"
        prof = ""
        prof_val = ""
        if request.proficiency == "Proficiency":
            prof = "PROF"
            prof_val += request.character.proficiency
        elif request.proficiency == "Half Proficiency":
            prof = "HALF-PROFICIENCY"
            prof_val += "+[[floor(" + request.character.proficiency + " / 2)]]"
        elif request.proficiency == "Expertise":
            prof = "EXPERTISE"
            prof_val += "+[[" + request.character.proficiency + " * 2]]"
        return template(request, "simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": "[[" + modifier + prof_val + "]]",
                          "r1": genRoll("1d20", {"--": modifier, prof: prof_val, "CUSTOM": custom_roll_dice})})
    else:
        return template(request, "simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": modifier,
                          "r1": genRoll("1d20", {request.ability: modifier, "CUSTOM": custom_roll_dice})})

def rollAbility(request, custom_roll_dice=""):
    dice_roll = genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice})
    modifier = request.modifier
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : request.name,
                     "mod": modifier,
                     "r1": dice_roll})

def rollSavingThrow(request, custom_roll_dice=""):
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : request.name + " Save",
                     "mod": request.modifier,
                     "r1": genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice})})

def rollInitiative(request, custom_roll_dice=""):
    nonlocal settings

    roll_properties = {"charname": request.character.name,
                       "rname" : "Initiative",
                       "mod": request.initiative}
    if settings["initiative-tracker"]:
        if request.advantage == RollType.ADVANTAGE:
            dice = "2d20kh1"
        elif request.advantage == RollType.SUPER_ADVANTAGE:
            dice = "3d20kh1"
        elif request.advantage == RollType.DISADVANTAGE:
            dice = "2d20kl1"
        elif request.advantage == RollType.SUPER_DISADVANTAGE:
            dice = "3d20kl1"
        elif request.advantage == RollType.DOUBLE or request.advantage == RollType.THRICE or request.advantage == RollType.QUERY:
            dice = ROLL20_INITIATIVE_ADVANTAGE_QUERY
        else:
            dice = "1d20"
        roll_properties["r1"] = genRoll(dice, {"INIT": request.initiative, "CUSTOM": custom_roll_dice, "": "&{tracker}"})
        roll_properties["normal"] = 1
    else:
        roll_properties["r1"] = genRoll("1d20", {"INIT": request.initiative, "CUSTOM": custom_roll_dice})
    return template(request, "simple", roll_properties)

def rollHitDice(request):
    rname = "Hit Dice" + (("(" + request.class + ")") if  request.multiclass else "")
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : rname,
                     "mod": request["hit-dice"],
                     "r1": subRolls(request["hit-dice"]),
                     "normal": 1})

def rollDeathSave(request, custom_roll_dice=""):
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : "Death Saving Throw",
                     "r1": genRoll("1d20", {"CUSTOM": custom_roll_dice}),
                     "normal": 1})

def rollItem(request, custom_roll_dice=""):
    source = request["item-type"].trim().toLowerCase()
    if source == "tool, common" and request.character.abilities.length > 0:
        modifier = "?{Choose Ability"
        # [name, abbr, value, mod]
        for ability in request.character.abilities:
            modifier += "|" + ability[0] + ", " + ability[3]
        modifier += "}"
        proficiency = request.character.proficiency
        half_proficiency = "+[[floor(" + proficiency + " / 2)]]"
        expertise = "+[[" + proficiency + " * 2]]"
        prof = "?{Select Proficiency|None,+0|Half-Proficient," + half_proficiency + "|Profient," + proficiency + "|Expert," + expertise + "}"
        return rollTrait(request) + "\n" + \
            template(request, "simple",
                         {"charname": request.character.name,
                          "rname" : request.name,
                          "mod": "[[" + modifier + prof + "]]",
                          "r1": genRoll("1d20", {"ABILITY": modifier, "PROF": prof, "CUSTOM": custom_roll_dice})})
    else:
        return rollTrait(request)

def rollTrait(request):
    if request["source-type"]?:
        source = request["source-type"]
        if request.source.length > 0:
            source += ": " + request.source
    elif request["item-type"]?:
        source = request["item-type"]
    else:
        source = request.type
    return template(request, "traits",
                    {"charname": request.character.name,
                     "name": request.name,
                     "source": source,
                     "description": subDescriptionRolls(request, request.description)})

def rollAttack(request, custom_roll_dice=""):
    nonlocal settings

    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        d20_roll = "1d20"
        if request["critical-limit"]:
            d20_roll = "1d20cs>" + request["critical-limit"]
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll(d20_roll, {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        crit_damages = list(request["critical-damages"])
        crit_damage_types = list(request["critical-damage-types"])

        # Ranger Ability Support
        for dmgIndex, dmgType in enumerate(damage_types):
            if damage_types[dmgIndex] == "Colossus Slayer":
                damages[dmgIndex] = ROLL20_ADD_GENERIC_DAMAGE_DMG_QUERY.replace(/%dmgType%/, damage_types[dmgIndex]).replace(/%dmg%/, damages[dmgIndex])

        dmg_props = damagesToRollProperties(damages, damage_types, crit_damages, crit_damage_types)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        template_type = "atk"
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template(request, "dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template(request, "dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    return template(request, template_type, properties)

def rollSpellCard(request):
    properties = {"charname": request.character.name,
                  "name": request.name,
                  "castingtime": request["casting-time"],
                  "range": request.range,
                  "duration": request.duration}

    if request["cast-at"]?:
        properties["level"] = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
    else:
        properties["level"] = request["level-school"]

    components = request.components
    while components != "":
        if components[0] == "V":
            properties["v"] = 1
            components = components[1:]
        elif components[0] == "S":
            properties["s"] = 1
            components = components[1:]
        elif components[0] == "M":
            properties["m"] = 1
            properties["material"] = components[2:-1]
            components = ""
        if components.startsWith(", "):
            components = components[2:]
    if request.ritual:
        properties["ritual"] = 1
    if request.concentration:
        properties["concentration"] = 1
    description = request.description
    higher = description.indexOf("At Higher Levels.")
    if higher > 0:
        properties["description"] = subDescriptionRolls(request, description[:higher-1])
        properties["athigherlevels"] = subDescriptionRolls(request, description[higher+"At Higher Levels.".length:])
    else:
        properties["description"] = subDescriptionRolls(request, description)

    return template(request, "spell", properties)

def rollSpellAttack(request, custom_roll_dice):
    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        d20_roll = "1d20"
        if request["critical-limit"]:
            d20_roll = "1d20cs>" + request["critical-limit"]
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll(d20_roll, {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        critical_damages = list(request["critical-damages"])
        critical_damage_types = list(request["critical-damage-types"])
        if request.name == "Chromatic Orb":
            chromatic_type = "?{Choose damage type"
            for dmgtype in ["Acid", "Cold", "Fire", "Lightning", "Poison", "Thunder"]:
                idx = damage_types.index(dmgtype)
                chromatic_damage = damages.pypop(idx)
                damage_types.pypop(idx)
                idx = critical_damage_types.index(dmgtype)
                if idx >= 0:
                    crit_damage = critical_damages.pypop(idx)
                    critical_damage_types.pypop(idx)
                chromatic_type += "|" + dmgtype
            chromatic_type += "}"
            damages.insert(0, chromatic_damage)
            damage_types.insert(0, chromatic_type)
            critical_damages.insert(0, crit_damage)
            critical_damage_types.insert(0, chromatic_type)
        elif request.name == "Chaos Bolt":
            for dmgtype in ["Acid", "Cold", "Fire", "Force", "Lightning", "Poison", "Psychic", "Thunder"]:
                idx = damage_types.index(dmgtype)
                base_damage = damages.pypop(idx)
                damage_types.pypop(idx)
                idx = critical_damage_types.index(dmgtype)
                crit_damage = critical_damages.pypop(idx)
                critical_damage_types.pypop(idx)
            damages.insert(0, base_damage)
            damage_types.insert(0, "Chaotic energy")
            critical_damages.insert(0, crit_damage)
            critical_damage_types.insert(0, "Chaotic energy")
        elif request.name == "Life Transference":
            damages.append("Equal to Necrotic damage")
            damage_types.append("Healing")
        elif request.name == "Toll the Dead":
            damages[0] = ROLL20_TOLL_THE_DEAD_QUERY.replace("d8", damages[0]).replace("d12", damages[0].replace("d8", "d12"))
        dmg_props = damagesToRollProperties(damages, damage_types, critical_damages, critical_damage_types)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]
    if request["cast-at"]?:
        dmg_props["hldmg"] = genRoll(request["cast-at"][0]) + request["cast-at"][1:] + " Level"
    components = request.components
    if settings["components-display"] == "all":
        if components != "":
            properties["desc"] = settings["component-prefix"] + components
            components = ""
    elif settings["components-display"] == "material":
        while components != "":
            if components[0] in ["V", "S"]:
                components = components[1:]
                if components.startsWith(", "):
                    components = components[2:]
            if components[0] == "M":
                properties["desc"] = settings["component-prefix"] + components[2:-1]
                components = ""

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        template_type = "atk"
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template(request, "dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template(request, "dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    roll = template(request, template_type, properties)
    return roll


def injectSettingsButton():
    nonlocal btn

    icon = chrome.extension.getURL("images/icons/icon32.png")

    img = document.getElementById("beyond20-settings")
    if img:
        img.remove()
    img = E.img(id="beyond20-settings", src=icon, style="margin-left: 5px;")
    btn.after(img)
    img.onclick = alertQuickSettings


def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    filter_player = def(request):
        r = dict(request)
        del r["character"]
        return r
    print("Got MODIFIED message : ", filter_player(request))
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
    elif request.action == "open-options":
        alertFullSettings()
    elif request.action == "hp-update":
        if settings["update-hp"]:
            sendCustomEvent("UpdateHP", (request.character.name, request.character.hp, request.character["max-hp"], request.character["temp-hp"]))
    elif request.action == "conditions-update":
        if settings["display-conditions"]:
            character_name = request.character.name
            if request.character.exhaustion == 0:
                conditions = request.character.conditions
            else:
                conditions = request.character.conditions.concat(["Exhausted (Level " + request.character.exhaustion + ")"])

            # We can't use window.is_gm because it's not available to the content script
            is_gm = "The player link for this campaign is" in $("#textchat .message.system").text()
            em_command = "/emas " if is_gm else "/em "
            if conditions.length == 0:
                message = em_command + character_name + " has no active condition"
            else:
                message = em_command + character_name + " is : " + conditions.join(", ")
            postChatMessage(message, character_name)
    elif request.action == "roll":
        if request.character.type == "Character":
            custom_roll_dice = request.character.settings["custom-roll-dice"] ? ""
            custom_roll_dice = re.sub("([0-9]*d[0-9]+)", "\\1cs>100cf<0", custom_roll_dice)
        else:
            custom_roll_dice = ""
        if request.type == "skill":
            roll = rollSkill(request, custom_roll_dice)
        elif request.type == "ability":
            roll = rollAbility(request, custom_roll_dice)
        elif request.type == "saving-throw":
            roll = rollSavingThrow(request, custom_roll_dice)
        elif request.type == "initiative":
            roll = rollInitiative(request, custom_roll_dice)
        elif request.type == "hit-dice":
            roll = rollHitDice(request)
        elif request.type == "item":
            roll = rollItem(request, custom_roll_dice)
        elif request.type in ["feature", "trait", "action"]:
            roll = rollTrait(request)
        elif request.type == "death-save":
            roll = rollDeathSave(request, custom_roll_dice)
        elif request.type == "attack":
            roll = rollAttack(request, custom_roll_dice)
        elif request.type == "spell-card":
            roll = rollSpellCard(request)
        elif request.type == "spell-attack":
            roll = rollSpellAttack(request, custom_roll_dice)
        elif request.type == "avatar":
            roll = rollAvatarDisplay(request)
        else:
            # 'custom' or anything unexpected
            mod = request.modifier if request.modifier? else request.roll
            rname = request.name if request.name? else request.type
            roll = template(request, "simple",
                             {"charname": request.character.name,
                              "rname" : rname,
                              "mod": mod,
                              "r1": subRolls(request.roll),
                              "normal": 1})
        character_name = request.character.name
        if request.whisper == WhisperType.HIDE_NAMES:
            character_name = "???"
        print("templated roll: ", roll)
        postChatMessage(roll, character_name)

chrome.runtime.onMessage.addListener(handleMessage)
updateSettings()
chrome.runtime.sendMessage({"action": "activate-icon"})
sendCustomEvent("disconnect")
injectPageScript(chrome.runtime.getURL('src/roll20_script.js'))
injectSettingsButton()
