import re
from elementmaker import E

def replaceRollsCallback(match, replaceCB):
    dice = match.group(2)
    modifiers = match.group(3)
    if not dice?:
        dice = ""
        modifiers = match.group(4)

    result = match.group(1)
    result += replaceCB(dice, modifiers)
    result += match.group(5)
    return result

def replaceRolls(text, replaceCB):
    dice_regexp = "(^|[^\w])(?:(?:(?:(\d*d\d+(?:ro<2)?)((?:\s*[-+]\s*\d+)*))|((?:[-+]\s*\d+)+)))($|[^\w])"
    return re.sub(dice_regexp, def(m):
        return replaceRollsCallback(m, replaceCB)
    , text)

# Used to clean various imperfections in dice roll strings
def cleanRoll(rollText):
    if rollText == 0:
        return 0
    #clean adjacent '+'s (Roll20 treats it as a d20)
    #eg: (1d10 + + 2 + 3) -> (1d10 + 2 + 3)
    rollText = rollText.replace(/\+ \+/g, '+').replace(/\+ \-/g, '-')
    return rollText
    

# Taken from https://stackoverflow.com/questions/45985198/the-best-practice-to-detect-whether-a-browser-extension-is-running-on-chrome-or
def getBrowser():
    if jstype(chrome) != "undefined":
        if jstype(browser) != "undefined":
            return "Firefox"
        else:
            return "Chrome"
    else:
        return "Edge"

def isExtensionDisconnected():
    try:
        chrome.extension.getURL("")
        return False
    except:
        return True

# Taken from https://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script
def injectPageScript(url):
    s = document.createElement('script')
    s.src = url
    s.charset = "UTF-8"
    s.onload = def():
        this.remove()
    (document.head or document.documentElement).appendChild(s)

def injectCSS(css):
    s = document.createElement('style')
    s.textContent = css
    (document.head or document.documentElement).appendChild(s)

def sendCustomEvent(name, data):
    if getBrowser() == "Firefox":
        data = cloneInto(data, window)
    event = new CustomEvent("Beyond20_" + name, {"detail": data})
    document.dispatchEvent(event)

def addCustomEventListener(name, callback):
    cb = def(evt):
        callback(*evt.detail)
    event = ["Beyond20_" + name, cb, False]
    document.addEventListener(*event)
    return event

def roll20Title(title):
    return title.replace(" | Roll20", "")

def isFVTT(title):
    return "Foundry Virtual Tabletop" in title

def fvttTitle(title):
    return title.replace(" â€¢ Foundry Virtual Tabletop", "")

def urlMatches(url, matching):
    return url.match(matching.replace(/\*/g, "[^]*")) != None

def alertSettings(url, title):

    popup = chrome.extension.getURL(url)
    img = E.img(src=chrome.extension.getURL("images/icons/icon32.png"), style="margin-right: 3px;")
    if not alertify.Beyond20Settings ?:
        alertify.dialog('Beyond20Settings', def(): return {};, False, "alert")
    dialog = alertify.Beyond20Settings(img.outerHTML + title,
            E.iframe(src=popup, style="width: 100%; height: 100%;", frameborder="0", scrolling="yes"))
    dialog.set('padding', False).set('resizable', True).set('overflow', False).resizeTo("80%", "80%")
   
def alertQuickSettings():
    alertSettings("popup.html", "Beyond 20 Quick Settings")
def alertFullSettings():
    alertSettings("options.html", "Beyond 20 Settings")

def isListEqual(list1, list2):
    list1_str = list1.join(",")
    list2_str = list2.join(",")
    return list1_str == list2_str

def isObjectEqual(obj1, obj2):
    obj1_str = Object.entries(obj1).join(",")
    obj2_str = Object.entries(obj2).join(",")
    return obj1_str == obj2_str
